
							  === NumLib ===

A collection of numerical algorithms and utilities written in C++.

Copyright 2013 Benjamin Silbaugh

Permission is granted to copy and/or redistribute this software under the
terms of the MIT License. See LICENSE file for more information.


DESCRIPTION
===========

NumLib is a collection of C++ utilities for composing numerical
simulations. 

This project started as a way for me to develop my C++ programming skills;
however, some of these tools have found their way into some of my other
work. That said, parts of this library are reasonably well thought out and
tested, and other parts are not.

If you're looking for a production quality C++ linear algebra library, you
may want to take a look at Armadillo. For production quality sparse linear
solvers, you may want to consider PETSc or Trilinos.

LIBRARY STRUCTURE
=================

doc... Contains all NumLib documentation

src................ Contains all source code (including headers)
src/base........... Core NumLib components and typedefs
src/array.......... Numerical array types and templates
src/linalg......... Linear algebra tools
src/integration.... Numerical quadrature tools
src/tensor......... Cartesian tensor library for (dim-3 spaces)
src/optimization... Numerical optimization tools
src/solvers........ Nonlinear solver templates

examples... Example usage of NumLib tools

python..... Python language bindings for a subset of NumLib

testing.... Testing suite: incremental and unit tests.

old-test... The original test suite. This is partially broken.

BUILDING AND INSTALLATION
=========================

Prerequisites
-------------

* NumLib currently uses the SCons build system. Thus, you must have SCons
	installed on your system. See the SCons build script for customization
	parameters.

* To build the Python language bindings, you will need Python version >=
	2.6 (but less than 3.0) and Boost Python version >= 1.40

Configuring
-----------

Currently, custom configuration is not supported. All compile options are
automatically detected by SCons. This will be changed in future releases.

Compiling
---------

To build NumLib, simply execute scons from within the top level of the
source tree:

	$ cd numlib-v.x.y.z
	$ scons

To build the documentation, execute doxygen from within the top level
of the source tree:
	
	$ doxygen

Installation
------------

By default, the SCons build script installs into the top level source
tree.